create table "public"."citations" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "project_id" bigint not null,
    "data" json not null,
    "owner_id" uuid not null
);


alter table "public"."citations" enable row level security;

create table "public"."documents" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "modified_at" timestamp with time zone default now(),
    "owner_id" uuid not null,
    "project_id" bigint not null,
    "content" json
);


alter table "public"."documents" enable row level security;

create table "public"."journals" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "sections" text[] not null,
    "styling_requirements" text,
    "abstract_limit" bigint not null,
    "body_limit" bigint not null,
    "tables_figures_limit" bigint not null,
    "references_limit" bigint not null,
    "name" text not null
);


alter table "public"."journals" enable row level security;

create table "public"."profiles" (
    "id" uuid not null,
    "created_at" timestamp with time zone not null default now(),
    "first_name" text,
    "last_name" text,
    "email" text
);


alter table "public"."profiles" enable row level security;

create table "public"."projects" (
    "id" bigint generated by default as identity not null,
    "owner_id" uuid not null,
    "title" text
);


alter table "public"."projects" enable row level security;

CREATE UNIQUE INDEX citation_id_key ON public.citations USING btree (id);

CREATE UNIQUE INDEX citation_pkey ON public.citations USING btree (id);

CREATE UNIQUE INDEX documents_pkey ON public.documents USING btree (id);

CREATE UNIQUE INDEX journals_id_key ON public.journals USING btree (id);

CREATE UNIQUE INDEX journals_pkey ON public.journals USING btree (id);

CREATE UNIQUE INDEX profiles_pkey ON public.profiles USING btree (id);

CREATE UNIQUE INDEX projects_pkey ON public.projects USING btree (id);

alter table "public"."citations" add constraint "citation_pkey" PRIMARY KEY using index "citation_pkey";

alter table "public"."documents" add constraint "documents_pkey" PRIMARY KEY using index "documents_pkey";

alter table "public"."journals" add constraint "journals_pkey" PRIMARY KEY using index "journals_pkey";

alter table "public"."profiles" add constraint "profiles_pkey" PRIMARY KEY using index "profiles_pkey";

alter table "public"."projects" add constraint "projects_pkey" PRIMARY KEY using index "projects_pkey";

alter table "public"."citations" add constraint "citation_id_key" UNIQUE using index "citation_id_key";

alter table "public"."citations" add constraint "citation_owner_id_fkey" FOREIGN KEY (owner_id) REFERENCES profiles(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."citations" validate constraint "citation_owner_id_fkey";

alter table "public"."citations" add constraint "citation_project_id_fkey" FOREIGN KEY (project_id) REFERENCES projects(id) not valid;

alter table "public"."citations" validate constraint "citation_project_id_fkey";

alter table "public"."documents" add constraint "documents_owner_id_fkey" FOREIGN KEY (owner_id) REFERENCES profiles(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."documents" validate constraint "documents_owner_id_fkey";

alter table "public"."documents" add constraint "documents_project_id_fkey" FOREIGN KEY (project_id) REFERENCES projects(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."documents" validate constraint "documents_project_id_fkey";

alter table "public"."journals" add constraint "journals_id_key" UNIQUE using index "journals_id_key";

alter table "public"."profiles" add constraint "profiles_id_fkey" FOREIGN KEY (id) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."profiles" validate constraint "profiles_id_fkey";

alter table "public"."projects" add constraint "projects_owner_id_fkey" FOREIGN KEY (owner_id) REFERENCES profiles(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."projects" validate constraint "projects_owner_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.handle_new_user()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
begin
  insert into public.profiles (id, first_name, last_name, email)
  values (new.id, new.raw_user_meta_data->>'first_name', new.raw_user_meta_data->>'last_name', new.email);
  return new;
end;
$function$
;

grant delete on table "public"."citations" to "anon";

grant insert on table "public"."citations" to "anon";

grant references on table "public"."citations" to "anon";

grant select on table "public"."citations" to "anon";

grant trigger on table "public"."citations" to "anon";

grant truncate on table "public"."citations" to "anon";

grant update on table "public"."citations" to "anon";

grant delete on table "public"."citations" to "authenticated";

grant insert on table "public"."citations" to "authenticated";

grant references on table "public"."citations" to "authenticated";

grant select on table "public"."citations" to "authenticated";

grant trigger on table "public"."citations" to "authenticated";

grant truncate on table "public"."citations" to "authenticated";

grant update on table "public"."citations" to "authenticated";

grant delete on table "public"."citations" to "service_role";

grant insert on table "public"."citations" to "service_role";

grant references on table "public"."citations" to "service_role";

grant select on table "public"."citations" to "service_role";

grant trigger on table "public"."citations" to "service_role";

grant truncate on table "public"."citations" to "service_role";

grant update on table "public"."citations" to "service_role";

grant delete on table "public"."documents" to "anon";

grant insert on table "public"."documents" to "anon";

grant references on table "public"."documents" to "anon";

grant select on table "public"."documents" to "anon";

grant trigger on table "public"."documents" to "anon";

grant truncate on table "public"."documents" to "anon";

grant update on table "public"."documents" to "anon";

grant delete on table "public"."documents" to "authenticated";

grant insert on table "public"."documents" to "authenticated";

grant references on table "public"."documents" to "authenticated";

grant select on table "public"."documents" to "authenticated";

grant trigger on table "public"."documents" to "authenticated";

grant truncate on table "public"."documents" to "authenticated";

grant update on table "public"."documents" to "authenticated";

grant delete on table "public"."documents" to "service_role";

grant insert on table "public"."documents" to "service_role";

grant references on table "public"."documents" to "service_role";

grant select on table "public"."documents" to "service_role";

grant trigger on table "public"."documents" to "service_role";

grant truncate on table "public"."documents" to "service_role";

grant update on table "public"."documents" to "service_role";

grant delete on table "public"."journals" to "anon";

grant insert on table "public"."journals" to "anon";

grant references on table "public"."journals" to "anon";

grant select on table "public"."journals" to "anon";

grant trigger on table "public"."journals" to "anon";

grant truncate on table "public"."journals" to "anon";

grant update on table "public"."journals" to "anon";

grant delete on table "public"."journals" to "authenticated";

grant insert on table "public"."journals" to "authenticated";

grant references on table "public"."journals" to "authenticated";

grant select on table "public"."journals" to "authenticated";

grant trigger on table "public"."journals" to "authenticated";

grant truncate on table "public"."journals" to "authenticated";

grant update on table "public"."journals" to "authenticated";

grant delete on table "public"."journals" to "service_role";

grant insert on table "public"."journals" to "service_role";

grant references on table "public"."journals" to "service_role";

grant select on table "public"."journals" to "service_role";

grant trigger on table "public"."journals" to "service_role";

grant truncate on table "public"."journals" to "service_role";

grant update on table "public"."journals" to "service_role";

grant delete on table "public"."profiles" to "anon";

grant insert on table "public"."profiles" to "anon";

grant references on table "public"."profiles" to "anon";

grant select on table "public"."profiles" to "anon";

grant trigger on table "public"."profiles" to "anon";

grant truncate on table "public"."profiles" to "anon";

grant update on table "public"."profiles" to "anon";

grant delete on table "public"."profiles" to "authenticated";

grant insert on table "public"."profiles" to "authenticated";

grant references on table "public"."profiles" to "authenticated";

grant select on table "public"."profiles" to "authenticated";

grant trigger on table "public"."profiles" to "authenticated";

grant truncate on table "public"."profiles" to "authenticated";

grant update on table "public"."profiles" to "authenticated";

grant delete on table "public"."profiles" to "service_role";

grant insert on table "public"."profiles" to "service_role";

grant references on table "public"."profiles" to "service_role";

grant select on table "public"."profiles" to "service_role";

grant trigger on table "public"."profiles" to "service_role";

grant truncate on table "public"."profiles" to "service_role";

grant update on table "public"."profiles" to "service_role";

grant delete on table "public"."projects" to "anon";

grant insert on table "public"."projects" to "anon";

grant references on table "public"."projects" to "anon";

grant select on table "public"."projects" to "anon";

grant trigger on table "public"."projects" to "anon";

grant truncate on table "public"."projects" to "anon";

grant update on table "public"."projects" to "anon";

grant delete on table "public"."projects" to "authenticated";

grant insert on table "public"."projects" to "authenticated";

grant references on table "public"."projects" to "authenticated";

grant select on table "public"."projects" to "authenticated";

grant trigger on table "public"."projects" to "authenticated";

grant truncate on table "public"."projects" to "authenticated";

grant update on table "public"."projects" to "authenticated";

grant delete on table "public"."projects" to "service_role";

grant insert on table "public"."projects" to "service_role";

grant references on table "public"."projects" to "service_role";

grant select on table "public"."projects" to "service_role";

grant trigger on table "public"."projects" to "service_role";

grant truncate on table "public"."projects" to "service_role";

grant update on table "public"."projects" to "service_role";

create policy "Users can read, insert, update and delete citations"
on "public"."citations"
as permissive
for all
to authenticated
using ((auth.uid() = owner_id));


create policy "Enable read access for document"
on "public"."documents"
as permissive
for select
to authenticated
using ((auth.uid() = owner_id));


create policy "Users can insert document"
on "public"."documents"
as permissive
for insert
to authenticated
with check ((auth.uid() = owner_id));


create policy "Users can update document"
on "public"."documents"
as permissive
for update
to authenticated
using ((auth.uid() = owner_id));


create policy "Enable read access for authenticated users"
on "public"."journals"
as permissive
for select
to authenticated
using (true);


create policy "Enable read access for own profile"
on "public"."profiles"
as permissive
for select
to authenticated
using ((auth.uid() = id));


create policy "Users can insert their own profile."
on "public"."profiles"
as permissive
for insert
to authenticated
with check ((auth.uid() = id));


create policy "Users can update own profile."
on "public"."profiles"
as permissive
for update
to authenticated
using ((auth.uid() = id));


create policy "Users can read, insert, update an delete projects"
on "public"."projects"
as permissive
for all
to authenticated
using ((auth.uid() = owner_id));



