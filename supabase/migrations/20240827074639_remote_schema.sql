create table "public"."figure_groups" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "project_id" bigint not null,
    "owner_id" uuid not null,
    "title" text not null,
    "description" text
);


alter table "public"."figure_groups" enable row level security;

create table "public"."figures" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "owner_id" uuid not null,
    "caption" text not null,
    "figure_group_id" bigint not null,
    "url" text not null
);


alter table "public"."figures" enable row level security;

alter table "public"."profiles" add column "zotero_api_key" text;

alter table "public"."profiles" add column "zotero_oauth_state" smallint not null default '0'::smallint;

alter table "public"."profiles" add column "zotero_userId" text;

CREATE UNIQUE INDEX figure_groups_pkey ON public.figure_groups USING btree (id);

CREATE UNIQUE INDEX figures_pkey ON public.figures USING btree (id);

alter table "public"."figure_groups" add constraint "figure_groups_pkey" PRIMARY KEY using index "figure_groups_pkey";

alter table "public"."figures" add constraint "figures_pkey" PRIMARY KEY using index "figures_pkey";

alter table "public"."figure_groups" add constraint "figure_groups_owner_id_fkey" FOREIGN KEY (owner_id) REFERENCES profiles(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."figure_groups" validate constraint "figure_groups_owner_id_fkey";

alter table "public"."figure_groups" add constraint "figure_groups_project_id_fkey" FOREIGN KEY (project_id) REFERENCES projects(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."figure_groups" validate constraint "figure_groups_project_id_fkey";

alter table "public"."figures" add constraint "figures_figure_group_id_fkey" FOREIGN KEY (figure_group_id) REFERENCES figure_groups(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."figures" validate constraint "figures_figure_group_id_fkey";

alter table "public"."figures" add constraint "figures_owner_id_fkey" FOREIGN KEY (owner_id) REFERENCES profiles(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."figures" validate constraint "figures_owner_id_fkey";

grant delete on table "public"."figure_groups" to "anon";

grant insert on table "public"."figure_groups" to "anon";

grant references on table "public"."figure_groups" to "anon";

grant select on table "public"."figure_groups" to "anon";

grant trigger on table "public"."figure_groups" to "anon";

grant truncate on table "public"."figure_groups" to "anon";

grant update on table "public"."figure_groups" to "anon";

grant delete on table "public"."figure_groups" to "authenticated";

grant insert on table "public"."figure_groups" to "authenticated";

grant references on table "public"."figure_groups" to "authenticated";

grant select on table "public"."figure_groups" to "authenticated";

grant trigger on table "public"."figure_groups" to "authenticated";

grant truncate on table "public"."figure_groups" to "authenticated";

grant update on table "public"."figure_groups" to "authenticated";

grant delete on table "public"."figure_groups" to "service_role";

grant insert on table "public"."figure_groups" to "service_role";

grant references on table "public"."figure_groups" to "service_role";

grant select on table "public"."figure_groups" to "service_role";

grant trigger on table "public"."figure_groups" to "service_role";

grant truncate on table "public"."figure_groups" to "service_role";

grant update on table "public"."figure_groups" to "service_role";

grant delete on table "public"."figures" to "anon";

grant insert on table "public"."figures" to "anon";

grant references on table "public"."figures" to "anon";

grant select on table "public"."figures" to "anon";

grant trigger on table "public"."figures" to "anon";

grant truncate on table "public"."figures" to "anon";

grant update on table "public"."figures" to "anon";

grant delete on table "public"."figures" to "authenticated";

grant insert on table "public"."figures" to "authenticated";

grant references on table "public"."figures" to "authenticated";

grant select on table "public"."figures" to "authenticated";

grant trigger on table "public"."figures" to "authenticated";

grant truncate on table "public"."figures" to "authenticated";

grant update on table "public"."figures" to "authenticated";

grant delete on table "public"."figures" to "service_role";

grant insert on table "public"."figures" to "service_role";

grant references on table "public"."figures" to "service_role";

grant select on table "public"."figures" to "service_role";

grant trigger on table "public"."figures" to "service_role";

grant truncate on table "public"."figures" to "service_role";

grant update on table "public"."figures" to "service_role";

create policy "user has full access on their figure groups"
on "public"."figure_groups"
as permissive
for all
to authenticated
using ((auth.uid() = owner_id));


create policy "user has full access on their figures"
on "public"."figures"
as permissive
for all
to authenticated
using ((auth.uid() = owner_id));



